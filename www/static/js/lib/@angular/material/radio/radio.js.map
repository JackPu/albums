{"version":3,"sources":["radio/radio.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EAEL,SAAS,EACT,eAAe,EACf,SAAS,EACT,YAAY,EACZ,WAAW,EACX,KAAK,EAEL,QAAQ,EACR,MAAM,EACN,SAAS,EACT,iBAAiB,EACjB,UAAU,EACV,QAAQ,EAET,MAAM,eAAe;OACf,EACL,iBAAiB,EAElB,MAAM,gBAAgB;OAChB,EAAC,2BAA2B,EAAC,MAAM,SAAS;AAInD;;;GAGG;AACH,OAAO,IAAM,qCAAqC,GAAQ;IACxD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,YAAY,EAAZ,CAAY,CAAC;IAC3C,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF,eAAe;AACf,uCAAuC;AACvC,gDAAgD;AAChD,iBAAiB;AACjB,MAAM;AACN,qBAAqB;AACrB,qCAAqC;AAErC,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAEzB,6EAA6E;AAC7E;IAAA;IAGA,CAAC;IAAD,oBAAC;AAAD,CAHA,AAGC,IAAA;AASD;IAAA;QACE;;;;;WAKG;QACK,WAAM,GAAQ,IAAI,CAAC;QAE3B,sEAAsE;QAC9D,UAAK,GAAW,oBAAkB,gBAAgB,EAAI,CAAC;QAE/D,oEAAoE;QAC5D,cAAS,GAAY,KAAK,CAAC;QAEnC,+DAA+D;QACvD,cAAS,GAAkB,IAAI,CAAC;QAExC,6DAA6D;QACrD,mBAAc,GAAY,KAAK,CAAC;QAExC,yDAAyD;QACjD,kCAA6B,GAAyB,UAAC,KAAK,IAAM,CAAC,CAAC;QAE5E,8EAA8E;QAC9E,cAAS,GAAc,cAAO,CAAC,CAAC;QAEhC,kDAAkD;QAElD,WAAM,GAAgC,IAAI,YAAY,EAAiB,CAAC;QAExE,2BAA2B;QAE3B,YAAO,GAA6B,IAAI,CAAC;IAwI3C,CAAC;IArIC,sBAAI,8BAAI;aAAR;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;aAED,UAAS,KAAa;YACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACjC,CAAC;;;OALA;IAUD,sBAAI,kCAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aAED,UAAa,KAAK;YAChB,yFAAyF;YACzF,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QACpE,CAAC;;;OALA;IAQD,sBAAI,+BAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAU,QAAa;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;gBAC5B,+EAA+E;gBAC/E,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;gBAEvB,IAAI,CAAC,6BAA6B,EAAE,CAAC;gBAErC,+EAA+E;gBAC/E,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC1B,CAAC;YACH,CAAC;QACH,CAAC;;;OAdA;IAiBD,sBAAI,kCAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aAED,UAAa,QAAuB;YAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,KAAK,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;YAE9C,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;YAC1B,CAAC;QACH,CAAC;;;OATA;IAWD;;;;OAIG;IACH,yCAAkB,GAAlB;QACE,uFAAuF;QACvF,wFAAwF;QACxF,yDAAyD;QACzD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,6BAAM,GAAN;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAEO,8CAAuB,GAA/B;QAAA,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;gBACxB,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,0EAA0E;IAClE,oDAA6B,GAArC;QAAA,iBAcC;QAbC,+DAA+D;QAC/D,IAAI,iBAAiB,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC;QAEtF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC/C,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,IAAI,KAAI,CAAC,MAAM,EAA1B,CAA0B,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhF,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK,IAAM,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;IACH,CAAC;IAED,oEAAoE;IAC5D,uCAAgB,GAAxB;QACE,IAAI,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;QAChC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9B,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;QAGI;IACJ,iCAAU,GAAV,UAAW,KAAU;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,uCAAgB,GAAhB,UAAiB,EAAwB;QACvC,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,wCAAiB,GAAjB,UAAkB,EAAO;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IA5ID;QAAC,MAAM,EAAE;;gDAAA;IAIT;QAAC,eAAe,CAAC,UAAU,CAAC,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC,CAAC;;iDAAA;IAGjD;QAAC,KAAK,EAAE;;4CAAA;IAUR;QAAC,KAAK,EAAE;;+CAAA;IAER;QAAC,KAAK,EAAE;;gDAAA;IAUR;QAAC,KAAK,EAAE;;6CAAA;IAmBR;QAAC,KAAK,EAAE;;gDAAA;IAnFV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE,CAAC,qCAAqC,CAAC;YAClD,IAAI,EAAE;gBACJ,MAAM,EAAE,YAAY;aACrB;SACF,CAAC;;oBAAA;IA0KF,mBAAC;AAAD,CAzKA,AAyKC,IAAA;AAUD;IAoCE,uBAAwB,UAAwB,EAC7B,eAA4C;QAC7D,oEAAoE;QACpE,gFAAgF;QAvCpF,iBAgLC;QA3IoB,oBAAe,GAAf,eAAe,CAA6B;QAhC/D,qCAAqC;QAC7B,aAAQ,GAAY,KAAK,CAAC;QAElC,0CAA0C;QAG1C,OAAE,GAAW,cAAY,gBAAgB,EAAI,CAAC;QAe9C,mCAAmC;QAC3B,WAAM,GAAQ,IAAI,CAAC;QAK3B,kDAAkD;QAElD,WAAM,GAAgC,IAAI,YAAY,EAAiB,CAAC;QAOtE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,eAAe,CAAC,MAAM,CAAC,UAAC,EAAU,EAAE,IAAY;YAC9C,EAAE,CAAC,CAAC,EAAE,IAAI,KAAI,CAAC,EAAE,IAAI,IAAI,IAAI,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvC,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAI,kCAAO;aAAX;YACE,MAAM,CAAI,IAAI,CAAC,EAAE,WAAQ,CAAC;QAC5B,CAAC;;;OAAA;IAID,sBAAI,kCAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;aAED,UAAY,eAAwB;YAClC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpB,2DAA2D;gBAC3D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC;YAEhC,EAAE,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC9E,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;YAClC,CAAC;QACH,CAAC;;;OAbA;IAiBD,sBAAI,gCAAK;QAFT,uDAAuD;aAEvD;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAU,KAAU;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC;gBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC5C,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;gBAChC,CAAC;gBACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACtB,CAAC;QACH,CAAC;;;OATA;IAcD,sBAAI,gCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC;QACtF,CAAC;aAED,UAAU,KAAsB;YAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAJA;IAQD,sBAAI,mCAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACjF,CAAC;aAED,UAAa,KAAc;YACzB,yFAAyF;YACzF,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QACpE,CAAC;;;OALA;IAOD,qBAAqB;IACrB,gCAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,0EAA0E;YAC1E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC;YACrD,oCAAoC;YACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QACnC,CAAC;IACH,CAAC;IAED,gDAAgD;IACxC,wCAAgB,GAAxB;QACE,IAAI,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;QAChC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,qCAAa,GAAb;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,qBAAqB;IACrB,oCAAY,GAAZ;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,qBAAqB;IACrB,qCAAa,GAAb,UAAc,KAAY;QACxB,mFAAmF;QACnF,qFAAqF;QACrF,wFAAwF;QACxF,gFAAgF;QAChF,8FAA8F;QAC9F,2CAA2C;QAC3C,kEAAkE;QAClE,KAAK,CAAC,eAAe,EAAE,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,sCAAc,GAAd,UAAe,KAAY;QACzB,0DAA0D;QAC1D,yEAAyE;QACzE,gDAAgD;QAChD,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IA7KD;QAAC,WAAW,CAAC,wBAAwB,CAAC;;qDAAA;IAOtC;QAAC,WAAW,CAAC,IAAI,CAAC;QACjB,KAAK,EAAE;;6CAAA;IAIR;QAAC,KAAK,EAAE;;+CAAA;IAIR;QAAC,KAAK,CAAC,YAAY,CAAC;;oDAAA;IAGpB;QAAC,KAAK,CAAC,iBAAiB,CAAC;;yDAAA;IAYzB;QAAC,MAAM,EAAE;;iDAAA;IAqBT;QAAC,WAAW,CAAC,wBAAwB,CAAC;QACrC,KAAK,EAAE;;gDAAA;IAmBR;QAAC,KAAK,EAAE;;8CAAA;IAgBR;QAAC,KAAK,EAAE;;8CAAA;IASR;QAAC,WAAW,CAAC,yBAAyB,CAAC;QACtC,KAAK,EAAE;;iDAAA;IA3GV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,iBAAiB;YAC3B,WAAW,EAAE,YAAY;YACzB,SAAS,EAAE,CAAC,WAAW,CAAC;YACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;SACtC,CAAC;mBAqCa,QAAQ,EAAE;;qBArCvB;IAiLF,oBAAC;AAAD,CAhLA,AAgLC,IAAA;AAOD;IAAA;IAOA,CAAC;IANQ,qBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE,CAAC,2BAA2B,CAAC;SACzC,CAAC;IACJ,CAAC;IAVH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC;YACtC,YAAY,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC;SAC5C,CAAC;;qBAAA;IAQF,oBAAC;AAAD,CAPA,AAOC,IAAA","file":"radio/radio.js","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  NgModule,\n  ModuleWithProviders,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor\n} from '@angular/forms';\nimport {MdUniqueSelectionDispatcher} from '../core';\n\n\n\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\n// TODO(mtlin):\n// Ink ripple is currently placeholder.\n// Determine motion spec for button transitions.\n// Design review.\n// RTL\n// Support forms API.\n// Use ChangeDetectionStrategy.OnPush\n\nvar _uniqueIdCounter = 0;\n\n/** A simple change event emitted by either MdRadioButton or MdRadioGroup. */\nexport class MdRadioChange {\n  source: MdRadioButton;\n  value: any;\n}\n\n@Directive({\n  selector: 'md-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n  },\n})\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n\n  /** Disables all individual radio buttons assigned to this group. */\n  private _disabled: boolean = false;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MdRadioButton = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  private _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** Event emitted when the group value changes. */\n  @Output()\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MdRadioButton))\n  _radios: QueryList<MdRadioButton> = null;\n\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  @Input() align: 'start' | 'end';\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n\n      // Only fire a change event if this isn't the first time the value is ever set.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   * TODO: internal\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      let matchingRadio = this._radios.filter(radio => radio.value == this._value)[0];\n\n      if (matchingRadio) {\n        this.selected = matchingRadio;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._radios.forEach(radio => { radio.checked = false; });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  private _emitChangeEvent(): void {\n    let event = new MdRadioChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n    * Implemented as part of ControlValueAccessor.\n    * TODO: internal\n    */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * TODO: internal\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * TODO: internal\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdRadioButton implements OnInit {\n\n  @HostBinding('class.md-radio-focused')\n  _isFocused: boolean;\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** The unique ID for the radio button. */\n  @HostBinding('id')\n  @Input()\n  id: string = `md-radio-${_uniqueIdCounter++}`;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input()\n  name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MdRadioGroup;\n\n  /** Event emitted when the group value changes. */\n  @Output()\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n\n  constructor(@Optional() radioGroup: MdRadioGroup,\n              public radioDispatcher: MdUniqueSelectionDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n\n    radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  @HostBinding('class.md-radio-checked')\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  set checked(newCheckedState: boolean) {\n    if (newCheckedState) {\n      // Notify all radio buttons with the same name to un-check.\n      this.radioDispatcher.notify(this.id, this.name);\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n      this.radioGroup.selected = this;\n    }\n  }\n\n  /** MdRadioGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.radioGroup != null && this.checked) {\n        this.radioGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  private _align: 'start' | 'end';\n\n  @Input()\n  get align(): 'start' | 'end' {\n    return this._align || (this.radioGroup != null && this.radioGroup.align) || 'start';\n  }\n\n  set align(value: 'start' | 'end') {\n    this._align = value;\n  }\n\n  @HostBinding('class.md-radio-disabled')\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n\n  set disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  /** TODO: internal */\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  /**\n   * We use a hidden native input field to handle changes to focus state via keyboard navigation,\n   * with visual rendering done separately. The native element is kept in sync with the overall\n   * state of the component.\n   */\n  _onInputFocus() {\n    this._isFocused = true;\n  }\n\n  /** TODO: internal */\n  _onInputBlur() {\n    this._isFocused = false;\n\n    if (this.radioGroup) {\n      this.radioGroup._touch();\n    }\n  }\n\n  /** TODO: internal */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   * TODO: internal\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._touch();\n    }\n  }\n}\n\n\n@NgModule({\n  exports: [MdRadioGroup, MdRadioButton],\n  declarations: [MdRadioGroup, MdRadioButton],\n})\nexport class MdRadioModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdRadioModule,\n      providers: [MdUniqueSelectionDispatcher],\n    };\n  }\n}\n"],"sourceRoot":"/source/"}