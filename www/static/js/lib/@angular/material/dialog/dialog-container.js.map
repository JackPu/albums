{"version":3,"sources":["dialog/dialog-container.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EACH,SAAS,EAET,SAAS,EACT,iBAAiB,EACjB,MAAM,EAET,MAAM,eAAe;OACf,EAAC,cAAc,EAAmB,mBAAmB,EAAiB,MAAM,SAAS;OAGrF,EAAC,mCAAmC,EAAC,MAAM,iBAAiB;OAC5D,EAAC,SAAS,EAAC,MAAM,yBAAyB;OAC1C,yBAAyB;AAGhC;;GAEG;AAaH;IAAuC,qCAAc;IAgBnD,2BAAoB,OAAe;QACjC,iBAAO,CAAC;QADU,YAAO,GAAP,OAAO,CAAQ;QATnC,8FAA8F;QACtF,yCAAoC,GAAY,IAAI,CAAC;IAU7D,CAAC;IAED,2DAA2D;IAC3D,iDAAqB,GAArB,UAAyB,MAA0B;QAAnD,iBAgBC;QAfC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,IAAI,mCAAmC,EAAE,CAAC;QAClD,CAAC;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAElE,2FAA2F;QAC3F,2FAA2F;QAC3F,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC;YAC9C,KAAI,CAAC,oCAAoC,GAAG,QAAQ,CAAC,aAAa,CAAC;YACnE,KAAI,CAAC,UAAU,CAAC,yBAAyB,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IAED,gDAAoB,GAApB,UAAqB,MAAsB;QACzC,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACrC,CAAC;IAED,gDAAgD;IAChD,2CAAe,GAAf;QACE,sEAAsE;QACtE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,uCAAW,GAAX;QAAA,iBAOC;QANC,0FAA0F;QAC1F,0FAA0F;QAC1F,6CAA6C;QAC7C,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC;YAC7C,KAAI,CAAC,oCAAoD,CAAC,KAAK,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC;IAtDD;QAAC,SAAS,CAAC,mBAAmB,CAAC;;0DAAA;IAG/B;QAAC,SAAS,CAAC,SAAS,CAAC;;yDAAA;IAjBvB;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,qBAAqB;YAC/B,WAAW,EAAE,uBAAuB;YACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;YACnC,IAAI,EAAE;gBACJ,OAAO,EAAE,qBAAqB;gBAC9B,aAAa,EAAE,oBAAoB;gBACnC,kBAAkB,EAAE,mBAAmB;aACxC;YACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;SACtC,CAAC;;yBAAA;IA0DF,wBAAC;AAAD,CAzDA,AAyDC,CAzDsC,cAAc,GAyDpD","file":"dialog/dialog-container.js","sourcesContent":["import {\n    Component,\n    ComponentRef,\n    ViewChild,\n    ViewEncapsulation,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContentAlreadyAttachedError} from './dialog-errors';\nimport {FocusTrap} from '../core/a11y/focus-trap';\nimport 'rxjs/add/operator/first';\n\n\n/**\n * Internal component that wraps user-provided dialog content.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog-container.css'],\n  host: {\n    'class': 'md-dialog-container',\n    '[attr.role]': 'dialogConfig?.role',\n    '(keydown.escape)': 'handleEscapeKey()',\n  },\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdDialogContainer extends BasePortalHost implements OnDestroy {\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The directive that traps and manages focus within the dialog. */\n  @ViewChild(FocusTrap) _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: Element = null;\n\n  /** The dialog configuration. */\n  dialogConfig: MdDialogConfig;\n\n  /** Reference to the open dialog. */\n  dialogRef: MdDialogRef<any>;\n\n  constructor(private _ngZone: NgZone) {\n    super();\n  }\n\n  /** Attach a portal as content to this dialog container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    let attachResult = this._portalHost.attachComponentPortal(portal);\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this._elementFocusedBeforeDialogWasOpened = document.activeElement;\n      this._focusTrap.focusFirstTabbableElement();\n    });\n\n    return attachResult;\n  }\n\n  attachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handles the user pressing the Escape key. */\n  handleEscapeKey() {\n    // TODO(jelbourn): add MdDialogConfig option to disable this behavior.\n    this.dialogRef.close();\n  }\n\n  ngOnDestroy() {\n    // When the dialog is destroyed, return focus to the element that originally had it before\n    // the dialog was opened. Wait for the DOM to finish settling before changing the focus so\n    // that it doesn't end up back on the <body>.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      (this._elementFocusedBeforeDialogWasOpened as HTMLElement).focus();\n    });\n  }\n}\n"],"sourceRoot":"/source/"}