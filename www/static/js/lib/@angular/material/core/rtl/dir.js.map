{"version":3,"sources":["core/rtl/dir.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACH,QAAQ,EAER,SAAS,EACT,WAAW,EACX,MAAM,EACN,KAAK,EACL,YAAY,EACf,MAAM,eAAe;AAItB;;;;;GAKG;AAMH;IAAA;QACgB,SAAI,GAAoB,KAAK,CAAC;QAElC,cAAS,GAAG,IAAI,YAAY,EAAQ,CAAC;IAgBjD,CAAC;IAbC,sBAAI,oBAAG;aAAP;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAkB;YACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC;;;OAPA;IASD,sBAAI,sBAAK;aAAT,cAA+B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD,UAAU,CAAkB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;;OADE;IAhBjD;QAAC,KAAK,CAAC,KAAK,CAAC;;qCAAA;IAEb;QAAC,MAAM,EAAE;;0CAAA;IAET;QAAC,WAAW,CAAC,UAAU,CAAC;;kCAAA;IAV1B;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,OAAO;YACjB,iGAAiG;YACjG,QAAQ,EAAE,WAAW;SACtB,CAAC;;WAAA;IAoBF,UAAC;AAAD,CAnBA,AAmBC,IAAA;AAOD;IAAA;IAOA,CAAC;IANQ,iBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAVH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,GAAG,CAAC;YACd,YAAY,EAAE,CAAC,GAAG,CAAC;SACpB,CAAC;;iBAAA;IAQF,gBAAC;AAAD,CAPA,AAOC,IAAA","file":"core/rtl/dir.js","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    Directive,\n    HostBinding,\n    Output,\n    Input,\n    EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n\n/**\n * Directive to listen to changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\n@Directive({\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n})\nexport class Dir {\n  @Input('dir') _dir: LayoutDirection = 'ltr';\n\n  @Output() dirChange = new EventEmitter<void>();\n\n  @HostBinding('attr.dir')\n  get dir(): LayoutDirection {\n    return this._dir;\n  }\n  set dir(v: LayoutDirection) {\n    let old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit(null);\n    }\n  }\n\n  get value(): LayoutDirection { return this.dir; }\n  set value(v: LayoutDirection) { this.dir = v; }\n}\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir]\n})\nexport class RtlModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RtlModule,\n      providers: []\n    };\n  }\n}\n"],"sourceRoot":"/source/"}