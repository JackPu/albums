{"version":3,"sources":["core/gestures/MdGestureConfig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,mBAAmB,EAAC,MAAM,2BAA2B;AAE7D,2DAA2D;AAE3D;IAAqC,mCAAmB;IAAxD;QAAqC,8BAAmB;QAEtD,gEAAgE;QAChE,WAAM,GAAa;YACjB,MAAM;YACN,WAAW;YACX,SAAS;YACT,WAAW;YACX,UAAU;YACV,WAAW;YACX,OAAO;YACP,YAAY;YACZ,UAAU;YACV,YAAY;YACZ,WAAW;SACZ,CAAC;IA+CJ,CAAC;IA7CC;;;;;;;;;;;SAWK;IACL,qCAAW,GAAX,UAAY,OAAoB;QAC9B,IAAM,EAAE,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;QAE/B,8BAA8B;QAC9B,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QAE/B,kFAAkF;QAClF,0DAA0D;QAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAC,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAC,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;QAE/E,4DAA4D;QAC5D,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEzB,4CAA4C;QAC5C,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,sFAAsF;IAC9E,2CAAiB,GAAzB,UAA0B,IAAgB,EAAE,OAAY;QAAE,sBAA6B;aAA7B,WAA6B,CAA7B,sBAA6B,CAA7B,IAA6B;YAA7B,qCAA6B;;QACrF,IAAI,UAAU,GAAG,IAAwB,IAAI,CAAC,WAAY,CAAC,OAAO,CAAC,CAAC;QAEpE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,YAAY,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAE/D,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IA7DH;QAAC,UAAU,EAAE;;uBAAA;IA+Db,sBAAC;AAAD,CA9DA,AA8DC,CA9DoC,mBAAmB,GA8DvD","file":"core/gestures/MdGestureConfig.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class MdGestureConfig extends HammerGestureConfig {\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = [\n    'drag',\n    'dragstart',\n    'dragend',\n    'dragright',\n    'dragleft',\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ];\n\n  /*\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * TODO: Confirm threshold numbers with Material Design UX Team\n   * */\n  buildHammer(element: HTMLElement) {\n    const mc = new Hammer(element);\n\n    // Default Hammer Recognizers.\n    let pan = new Hammer.Pan();\n    let swipe = new Hammer.Swipe();\n    let press = new Hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    let slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let drag = this._createRecognizer(slide, {event: 'drag', threshold: 6}, swipe);\n    let longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, drag, slide, longpress]);\n\n    return mc;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (<RecognizerStatic> base.constructor)(options);\n\n    inheritances.push(base);\n    inheritances.forEach((item) => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n"],"sourceRoot":"/source/"}