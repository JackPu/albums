{"version":3,"sources":["core/portal/portal-directives.ts"],"names":[],"mappings":"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","file":"core/portal/portal-directives.js","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n *\n * Usage:\n * <template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </template>\n */\n@Directive({\n  selector: '[portal]',\n  exportAs: 'portal',\n})\nexport class TemplatePortalDirective extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * <template [portalHost]=\"greeting\"></template>\n */\n@Directive({\n  selector: '[portalHost]',\n  inputs: ['portal: portalHost']\n})\nexport class PortalHostDirective extends BasePortalHost {\n  /** The attached portal. */\n  private _portal: Portal<any>;\n\n  constructor(\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  get portal(): Portal<any> {\n    return this._portal;\n  }\n\n  set portal(p: Portal<any>) {\n    this._replaceAttachedPortal(p);\n  }\n\n  /** Attach the given ComponentPortal to this PortlHost using the ComponentFactoryResolver. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    this.setDisposeFn(() => ref.destroy());\n    return ref;\n  }\n\n  /** Attach the given TemplatePortal to this PortlHost as an embedded View. */\n  attachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    this.setDisposeFn(() => this._viewContainerRef.clear());\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\n\n  /** Detatches the currently attached Portal (if there is one) and attaches the given Portal. */\n  private _replaceAttachedPortal(p: Portal<any>): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    if (p) {\n      this.attach(p);\n      this._portal = p;\n    }\n  }\n}\n\n\n@NgModule({\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PortalModule,\n      providers: []\n    };\n  }\n}\n"],"sourceRoot":"/source/"}